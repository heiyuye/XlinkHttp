package com.xlink.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.xlink.retrofithttp.entity.daoentity.User.UserSetting;
import cn.xlink.retrofithttp.entity.daoentity.User.UserSettingConverter;

import cn.xlink.retrofithttp.entity.daoentity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Corp_id = new Property(1, String.class, "corp_id", false, "CORP_ID");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "NICKNAME");
        public final static Property Create_date = new Property(5, String.class, "create_date", false, "CREATE_DATE");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property Source = new Property(7, int.class, "source", false, "SOURCE");
        public final static Property Region_id = new Property(8, String.class, "region_id", false, "REGION_ID");
        public final static Property Is_vaild = new Property(9, boolean.class, "is_vaild", false, "IS_VAILD");
        public final static Property Avatar = new Property(10, String.class, "avatar", false, "AVATAR");
        public final static Property Qq_open_id = new Property(11, String.class, "qq_open_id", false, "QQ_OPEN_ID");
        public final static Property Wx_open_id = new Property(12, String.class, "wx_open_id", false, "WX_OPEN_ID");
        public final static Property Wb_open_id = new Property(13, String.class, "wb_open_id", false, "WB_OPEN_ID");
        public final static Property Other_open_id = new Property(14, String.class, "other_open_id", false, "OTHER_OPEN_ID");
        public final static Property Country = new Property(15, String.class, "country", false, "COUNTRY");
        public final static Property Province = new Property(16, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(17, String.class, "city", false, "CITY");
        public final static Property Gender = new Property(18, String.class, "gender", false, "GENDER");
        public final static Property Passwd_inited = new Property(19, boolean.class, "passwd_inited", false, "PASSWD_INITED");
        public final static Property Age = new Property(20, int.class, "age", false, "AGE");
        public final static Property Setting = new Property(21, String.class, "setting", false, "SETTING");
        public final static Property IsActiveLogout = new Property(22, boolean.class, "isActiveLogout", false, "IS_ACTIVE_LOGOUT");
        public final static Property Password = new Property(23, String.class, "password", false, "PASSWORD");
    }

    private final UserSettingConverter settingConverter = new UserSettingConverter();

    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CORP_ID\" TEXT," + // 1: corp_id
                "\"PHONE\" TEXT," + // 2: phone
                "\"EMAIL\" TEXT," + // 3: email
                "\"NICKNAME\" TEXT," + // 4: nickname
                "\"CREATE_DATE\" TEXT," + // 5: create_date
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"SOURCE\" INTEGER NOT NULL ," + // 7: source
                "\"REGION_ID\" TEXT," + // 8: region_id
                "\"IS_VAILD\" INTEGER NOT NULL ," + // 9: is_vaild
                "\"AVATAR\" TEXT," + // 10: avatar
                "\"QQ_OPEN_ID\" TEXT," + // 11: qq_open_id
                "\"WX_OPEN_ID\" TEXT," + // 12: wx_open_id
                "\"WB_OPEN_ID\" TEXT," + // 13: wb_open_id
                "\"OTHER_OPEN_ID\" TEXT," + // 14: other_open_id
                "\"COUNTRY\" TEXT," + // 15: country
                "\"PROVINCE\" TEXT," + // 16: province
                "\"CITY\" TEXT," + // 17: city
                "\"GENDER\" TEXT," + // 18: gender
                "\"PASSWD_INITED\" INTEGER NOT NULL ," + // 19: passwd_inited
                "\"AGE\" INTEGER NOT NULL ," + // 20: age
                "\"SETTING\" TEXT," + // 21: setting
                "\"IS_ACTIVE_LOGOUT\" INTEGER NOT NULL ," + // 22: isActiveLogout
                "\"PASSWORD\" TEXT);"); // 23: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String corp_id = entity.getCorp_id();
        if (corp_id != null) {
            stmt.bindString(2, corp_id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(6, create_date);
        }
        stmt.bindLong(7, entity.getStatus());
        stmt.bindLong(8, entity.getSource());
 
        String region_id = entity.getRegion_id();
        if (region_id != null) {
            stmt.bindString(9, region_id);
        }
        stmt.bindLong(10, entity.getIs_vaild() ? 1L: 0L);
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(11, avatar);
        }
 
        String qq_open_id = entity.getQq_open_id();
        if (qq_open_id != null) {
            stmt.bindString(12, qq_open_id);
        }
 
        String wx_open_id = entity.getWx_open_id();
        if (wx_open_id != null) {
            stmt.bindString(13, wx_open_id);
        }
 
        String wb_open_id = entity.getWb_open_id();
        if (wb_open_id != null) {
            stmt.bindString(14, wb_open_id);
        }
 
        String other_open_id = entity.getOther_open_id();
        if (other_open_id != null) {
            stmt.bindString(15, other_open_id);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(16, country);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(17, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(18, city);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(19, gender);
        }
        stmt.bindLong(20, entity.getPasswd_inited() ? 1L: 0L);
        stmt.bindLong(21, entity.getAge());
 
        UserSetting setting = entity.getSetting();
        if (setting != null) {
            stmt.bindString(22, settingConverter.convertToDatabaseValue(setting));
        }
        stmt.bindLong(23, entity.getIsActiveLogout() ? 1L: 0L);
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(24, password);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String corp_id = entity.getCorp_id();
        if (corp_id != null) {
            stmt.bindString(2, corp_id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(6, create_date);
        }
        stmt.bindLong(7, entity.getStatus());
        stmt.bindLong(8, entity.getSource());
 
        String region_id = entity.getRegion_id();
        if (region_id != null) {
            stmt.bindString(9, region_id);
        }
        stmt.bindLong(10, entity.getIs_vaild() ? 1L: 0L);
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(11, avatar);
        }
 
        String qq_open_id = entity.getQq_open_id();
        if (qq_open_id != null) {
            stmt.bindString(12, qq_open_id);
        }
 
        String wx_open_id = entity.getWx_open_id();
        if (wx_open_id != null) {
            stmt.bindString(13, wx_open_id);
        }
 
        String wb_open_id = entity.getWb_open_id();
        if (wb_open_id != null) {
            stmt.bindString(14, wb_open_id);
        }
 
        String other_open_id = entity.getOther_open_id();
        if (other_open_id != null) {
            stmt.bindString(15, other_open_id);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(16, country);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(17, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(18, city);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(19, gender);
        }
        stmt.bindLong(20, entity.getPasswd_inited() ? 1L: 0L);
        stmt.bindLong(21, entity.getAge());
 
        UserSetting setting = entity.getSetting();
        if (setting != null) {
            stmt.bindString(22, settingConverter.convertToDatabaseValue(setting));
        }
        stmt.bindLong(23, entity.getIsActiveLogout() ? 1L: 0L);
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(24, password);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // corp_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // create_date
            cursor.getInt(offset + 6), // status
            cursor.getInt(offset + 7), // source
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // region_id
            cursor.getShort(offset + 9) != 0, // is_vaild
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // avatar
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // qq_open_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // wx_open_id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // wb_open_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // other_open_id
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // country
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // province
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // city
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // gender
            cursor.getShort(offset + 19) != 0, // passwd_inited
            cursor.getInt(offset + 20), // age
            cursor.isNull(offset + 21) ? null : settingConverter.convertToEntityProperty(cursor.getString(offset + 21)), // setting
            cursor.getShort(offset + 22) != 0, // isActiveLogout
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // password
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCorp_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreate_date(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setSource(cursor.getInt(offset + 7));
        entity.setRegion_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIs_vaild(cursor.getShort(offset + 9) != 0);
        entity.setAvatar(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQq_open_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWx_open_id(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWb_open_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOther_open_id(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCountry(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setProvince(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCity(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setGender(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPasswd_inited(cursor.getShort(offset + 19) != 0);
        entity.setAge(cursor.getInt(offset + 20));
        entity.setSetting(cursor.isNull(offset + 21) ? null : settingConverter.convertToEntityProperty(cursor.getString(offset + 21)));
        entity.setIsActiveLogout(cursor.getShort(offset + 22) != 0);
        entity.setPassword(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
